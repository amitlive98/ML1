---
title: "Day-3"
author: "Amit Kumar Mohapatra"
date: "2 May 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}

###Gradient decend
x=rnorm(100)
y=0.05*x
df_xy=data.frame(x=x,y=y)
plot(x,y)

cor(x,y)

df_xy=df_xy %>% mutate(xy=x*y)
df_xy=df_xy %>% mutate(mx_square=m*(x^2))

library(dplyr)
m=1000
alpha=0.01
n_iterations=1000
errors=c()
m_vals=c()
for (i in seq(1,n_iterations)) {
  m_vals=c(m_vals,m)
  curr_err=sum((y-(m*x))^2)/length(x)
  errors=c(errors,curr_err)
  df_xy=df_xy %>% mutate(xy=x*y)
df_xy=df_xy %>% mutate(mx_square=m*(x^2))
df_xy=df_xy %>% mutate(xy_mx2=xy-mx_square)
sigma_xy_mx2=sum(df_xy$xy_mx2)
m_gradient=-2/length(x) * sigma_xy_mx2
m=m-alpha*m_gradient
}

print(m)
## plot(errors)
{{plot(m_vals,errors)
  lines(m_vals,errors)}}




setwd("E:\\Machine Learning\\rmd files\\")
advertising=read.csv("Advertising.csv")

adv_training=advertising[sample(seq(1,nrow(advertising)),162),]
adv_testing=advertising[sample(seq(1,nrow(advertising)),38),]
lm(sales~TV,data = adv_training)

x=scale(advertising$TV)
y=advertising$sales
df_xy=data.frame(x=x,y=y)
plot(x, y)
#View(df_xy)
m=1
c1=10
alpha=0.01
n_iterations=100
errors=c()
m_vals=c()
c_vals=c()
for (i in seq(1,n_iterations)) {
  m_vals=c(m_vals,m)
  c_vals=c(c_vals,c1)
  curr_err=sum((y-(m*x))^2)/length(x)
  errors=c(errors,curr_err)
  df_xy=df_xy %>% mutate(xy=x*y)
  df_xy=df_xy %>% mutate(mx_square_c=(m*(x^2))+(c1*x))
  df_xy=df_xy %>% mutate(xy_mx2_c=xy-mx_square_c)
  df_xy=df_xy %>% mutate(y_mx_c=y-m*x-c1)
  sigma_xy_mx2_c=sum(df_xy$xy_mx2_c)
  sigma_y_mx_c=sum(df_xy$y_mx_c)
  m_gradient=-2/length(x) * sigma_xy_mx2_c
  c_gradient=-2/length(x)*sigma_y_mx_c
  m=m-alpha*m_gradient
  c1=c1-alpha*c_gradient
}
##View(df_xy)
print(m)
print(c)
lm(y~x,data = df_xy)
plot(errors)

#install.packages("rgl")
#library(rgl)
open3d()
plot3d(x=m_vals,y=c_vals,z=errors)
plot3d(x=m_vals,y=c_vals,z=errors,col = rainbow(100))


#####Surface plot with m and c #########
x=scale(advertising$TV)
y=advertising$sales
df_xy=data.frame(x=x,y=y)
plot(x, y)
#View(df_xy)
m=1
c1=10
alpha=0.01
n_iterations=100
errors=c()
m_vals=c()
c_vals=c()
for (i in seq(1,n_iterations)) {
  df_xy=mutate(df_xy,yhat2=(y-m*x-c1)^2)
  errors=c(errors,1/length(x)*sum(df_xy$yhat2))
  m_vals=c(m_vals,m)
  c_vals=c(c_vals,c1)
  #curr_err=sum((y-(m*x))^2)/length(x)
  #errors=c(errors,curr_err)
  df_xy=df_xy %>% mutate(xy=x*y)
  df_xy=df_xy %>% mutate(mx_square_c=(m*(x^2))+(c1*x))
  df_xy=df_xy %>% mutate(xy_mx2_c=xy-mx_square_c)
  df_xy=df_xy %>% mutate(y_mx_c=y-m*x-c1)
  sigma_xy_mx2_c=sum(df_xy$xy_mx2_c)
  sigma_y_mx_c=sum(df_xy$y_mx_c)
  m_gradient=-2/length(x) * sigma_xy_mx2_c
  c_gradient=-2/length(x)*sigma_y_mx_c
  m=m-alpha*m_gradient
  c1=c1-alpha*c_gradient
}
##View(df_xy)
print(m)
print(c)
lm(y~x,data = df_xy)
plot(errors)

##surface plot
m<-seq(-1,1,length.out = 100)
c<-seq(0,10,length.out = 100)
e<-c()
m_rep=c()
c_rep=c()
for (i in m) {
for (j in c) {
sales_predicted<-i*adv_training$TV+j
error = sum((adv_training$sales - sales_predicted)^2) / nrow(adv_training)
m_rep = c(m_rep,i)
c_rep = c(c_rep,j)
e=c(e,error)  
}
}
open3d()
plot3d(x=m_rep,y=c_rep,z=e,col=rainbow(100))


```
```{r}
######################## Decision Tree ################################################
library(tree)

model_tree=tree(sales~TV,data = advertising)
{{plot(model_tree)
 text(model_tree)}}

median(advertising$TV)
View(advertising)

advertising %>% filter(TV<122.05) %>% count()
advertising %>% filter(TV>122.05) %>% count()

advertising %>% filter(TV<122.05) %>% summarise(mean(sales))
advertising %>% filter(TV>122.05) %>% summarise(mean(sales))

partition.tree(model_tree)

advertising %>% filter(TV<134.75) %>% summarise(mean(sales))
advertising %>% filter(TV>2.4) %>% summarise(mean(sales))

TV_uniqs=sort(unique(advertising$TV))
cuts=c()
mses=c()
for (i in seq(1,length(TV_uniqs)-1)) {
  curr_cut=(TV_uniqs[i]+TV_uniqs[i+1])/2
  cuts=c(cuts,curr_cut)
  sample_left=advertising %>% filter(TV<curr_cut)
  sample_right=advertising %>% filter(TV>curr_cut)
  avg_left=mean(sample_left$sales)
  avg_right=mean(sample_right$sales)
  advertising$predicted_sales=if_else(advertising$TV<curr_cut,avg_left,avg_right)
  curr_mse=sum((advertising$sales - advertising$predicted_sales)^2)/nrow(advertising)
  mses=c(mses,curr_mse)
}
models_perf=data.frame(TV_cuts=cuts,MSE=mses)
models_perf %>% arrange(MSE) %>% head(1)


########## for advertising$TV<122.05 #################
adv_temp=advertising %>% filter(TV<122.05)
TV_uniqs=sort(unique(adv_temp$TV))
cuts=c()
mses=c()
for (i in seq(1,length(TV_uniqs)-1)) {
  curr_cut=(TV_uniqs[i]+TV_uniqs[i+1])/2
  cuts=c(cuts,curr_cut)
  sample_left=adv_temp %>% filter(TV<curr_cut)
  sample_right=adv_temp %>% filter(TV>curr_cut)
  avg_left=mean(sample_left$sales)
  avg_right=mean(sample_right$sales)
  adv_temp$predicted_sales=if_else(adv_temp$TV<curr_cut,avg_left,avg_right)
  curr_mse=sum((adv_temp$sales - adv_temp$predicted_sales)^2)/nrow(adv_temp)
  mses=c(mses,curr_mse)
}
models_perf=data.frame(TV_cuts=cuts,MSE=mses)
models_perf %>% arrange(MSE) %>% head(1)





```

